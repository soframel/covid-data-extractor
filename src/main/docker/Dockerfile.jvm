####
# This Dockerfile is used in order to build a container that runs the Quarkus application in JVM mode
#
# Before building the docker image run:
#
# mvn package
#
# Then, build the image with:
#
# docker build -f src/main/docker/Dockerfile.jvm -t quarkus/covid-data-extractor-jvm .
#
# Then run the container using:
#
# docker run -i --rm -p 8080:8080 quarkus/covid-data-extractor-jvm
#
# If you want to include the debug port into your docker image
# you will have to expose the debug port (default 5005) like this :  EXPOSE 8080 5050
# 
# Then run the container using : 
#
# docker run -i --rm -p 8080:8080 -p 5005:5005 -e JAVA_ENABLE_DEBUG="true" quarkus/covid-data-extractor-jvm
#
###
FROM registry.access.redhat.com/ubi8/ubi-minimal:8.1

ARG JAVA_PACKAGE=java-11-openjdk-headless
ARG RUN_JAVA_VERSION=1.3.8

ENV LANG='en_US.UTF-8' LANGUAGE='en_US:en'

COPY scripts/run-java.sh /deployments/

# Install java and the run-java script
# Also set up permissions for user `1001`
RUN microdnf install curl ca-certificates ${JAVA_PACKAGE} \
    && microdnf update \
    && microdnf clean all \
    && chown 1001 /deployments \
    && chmod "g+rwX" /deployments \
    && chown 1001:root /deployments \
    && chown 1001 /deployments/run-java.sh \
    && chmod 540 /deployments/run-java.sh \
    && echo "securerandom.source=file:/dev/urandom" >> /etc/alternatives/jre/lib/security/java.security

#TODO: Cron
#create script
#RUN echo "java -Delastic.password=\${ELASTIC_PASSWORD} -jar /usr/share/luxparkings/luxparkings-extractor.jar" >> /usr/share/luxparkings/luxparkings
#RUN chmod a+x /usr/share/luxparkings/luxparkings
#create file for crontab
#RUN echo "*/5 * * * * /usr/share/luxparkings/luxparkings" >> /usr/share/luxparkings/luxparkings-cron
#apply correct permissions
#RUN chmod 0600 /usr/share/luxparkings/luxparkings-cron
# Apply cron job
#RUN crontab /usr/share/luxparkings/luxparkings-cron
#fix link-count, as cron is being a pain, and docker is making hardlink count >0 (very high)
#RUN touch /etc/crontab /etc/cron.*/*
# Create the log file to be able to run tail
#RUN touch /var/log/cron.log
#CMD crond -l 2 -f

COPY target/lib/* /deployments/lib/
COPY target/*-runner.jar /deployments/app.jar

EXPOSE 8080
USER 1001

ENTRYPOINT ["/deployments/run-java.sh"]
#CMD "/bin/bash"